import streamlit as st
import pandas as pd
from datetime import datetime

# Load today's CSV
today = datetime.now().strftime('%Y-%m-%d')
file_path = f"data/mlb_dashboard_{today}.csv"

st.set_page_config(page_title="MLB Daily Dashboard", layout="wide")
st.title("‚öæ Ya Girl's Betting Dashboard")
st.caption(f"Updated for {today}")

try:
    df = pd.read_csv(file_path)

    # Choose Bet Type: Full Game or F5 ML
    bet_type = st.radio("Choose Bet Type View:", ["Full Game", "F5 ML"])

    # Optional: filter by team
    selected_team = st.selectbox("Filter by Team", ["All"] + sorted(df["Team"].unique().tolist()))
    if selected_team != "All":
        df = df[df["Team"] == selected_team]

    # Safe formatting for mixed data (numbers & strings)
    def safe_format(val, precision=2):
        if isinstance(val, (int, float)):
            return f"{val:.{precision}f}"
        return val

    # Define columns for each view
    full_game_columns = [
        "Team", "Opponent", "Pitcher", "Pitcher Handedness", 
        "ERA (Last 3 Starts)", "WHIP (Last 3 Starts)",
        "Opponent Pitcher", "Opponent Handedness", 
        "Opponent ERA (Last 3 Starts)", "Opponent WHIP (Last 3 Starts)",
        "Team RPG (L7)", "Team OPS (L7)", "Opp RPG (L7)", "Opp OPS (L7)",
        "Lean Call"
    ]

    f5_columns = [
        "Team", "Opponent", "Pitcher", "Pitcher Handedness", 
        "ERA (Last 3 Starts)", "WHIP (Last 3 Starts)",
        "Opponent Pitcher", "Opponent Handedness", 
        "Opponent ERA (Last 3 Starts)", "Opponent WHIP (Last 3 Starts)"
    ]

    # Choose columns to show
    columns_to_display = full_game_columns if bet_type == "Full Game" else f5_columns
    df = df[[col for col in columns_to_display if col in df.columns]]

    # Show formatted table
    st.dataframe(df.style.format({
        "ERA (Last 3 Starts)": lambda x: safe_format(x, 2),
        "WHIP (Last 3 Starts)": lambda x: safe_format(x, 2),
        "Team RPG (L7)": lambda x: safe_format(x, 2),
        "Team OPS (L7)": lambda x: safe_format(x, 3),
        "Opp RPG (L7)": lambda x: safe_format(x, 2),
        "Opp OPS (L7)": lambda x: safe_format(x, 3)
    }))

    # ‚úÖ Weather Checklist
    with st.expander("üìù MLB Weather Checklist ‚Äì ML vs RL", expanded=False):
        st.markdown("""
        **Run through this checklist before placing a bet:**

        - **Wind out (10+ mph):** More runs expected ‚Üí *Better for RL*
        - **Wind in (10+ mph):** Fewer runs expected ‚Üí *ML safer*
        - **Rain delay risk:** Watch for scratches/postponements
        - **Hot temps (80¬∞F+):** Ball carries more ‚Üí *RL edge*
        - **Cold temps (below 60¬∞F):** Pitcher-friendly ‚Üí *ML edge*
        - **Humidity:** Boosts carry ‚Üí *slight edge to RL*
        - **High elevation (e.g., COL):** More runs ‚Üí *RL edge*
        """)

    # Download button
    st.download_button("üì• Download CSV", df.to_csv(index=False), file_name=f"mlb_dashboard_{today}.csv")

except FileNotFoundError:
    st.error("No dashboard CSV found for today. Make sure you've run your notebook to generate it first.")
